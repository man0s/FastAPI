# name: CI/CD Pipeline
# on:
#   push:
#     branches:    
#       - 'development'
# jobs:
#   lint-test:
#     runs-on: ubuntu-latest
#     name: Lint and Test
#     steps:
#       - uses: actions/checkout@v3
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.9"
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install flake8 pytest requests
#           if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#       - name: Lint with flake8
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#           # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#           flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#       - name: Test with pytest
#         run: |
#           pytest
#   cicd-pipeline:
#     needs: lint-test
#     runs-on: ubuntu-latest
#     name: Build and Deploy
#     steps:
#     - uses: actions/checkout@v3
#     - name: Start minikube
#       id: minikube
#       with:
#         minikube-version: 1.25.2
#       uses: medyagh/setup-minikube@master
#     - name: kubectl
#       run: kubectl get pods -A
#     - name: Build image
#       run: |
#         export SHELL=/bin/bash
#         eval $(minikube -p minikube docker-env)
#         docker build -f ./Dockerfile -t local/fastapi .
#         echo -n "Verifying images:"
#         docker images    
#     - name: Deploy to minikube
#       run:
#         kubectl apply -f deploy-to-minikube.yaml
#     - name: Ensure the readiness of pods
#       run:
#         kubectl wait pods -l app=fastapi --for condition=Ready --timeout=90s


name: CI/CD Pipeline
on:
  push:
    branches:    
      - 'development'
jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup
    outputs:
      repo: ${{ steps.vars.outputs.repo }}
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Use repository
        uses: actions/checkout@v2
      - name: Build variables
        id: vars
        run: |
          echo "::set-output name=repo::$GITHUB_REPOSITORY"
          echo "::set-output name=tag::$(git rev-parse --short "$GITHUB_SHA")"
      - name: Upload repository
        uses: actions/upload-artifact@v2
        with:
          name: repository
          path: |
            ${{ github.workspace }}/infra
            ${{ github.workspace }}/Dockerfile
            ${{ github.workspace }}/src
            ${{ github.workspace }}/tests
            ${{ github.workspace }}/requirements.txt
  test:
    needs: setup
    runs-on: ubuntu-latest
    name: Test
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repository
      - name: ls
        run: ls -l
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest requests
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
  build:
    needs: [setup, test]
    runs-on: ubuntu-latest
    name: Build
    steps:
    - name: Download repository
      uses: actions/download-artifact@v2
      with:
        name: repository
    - name: Start minikube
      id: minikube
      with:
        minikube-version: 1.25.2
      uses: medyagh/setup-minikube@master
    - name: kubectl
      run: kubectl get pods -A
    - name: Build image
      run: |
        export SHELL=/bin/bash
        eval $(minikube -p minikube docker-env)
        docker build -f ./Dockerfile -t local/fastapi .
        echo -n "Verifying images:"
        docker images   
  deploy:
    needs: [setup, test, build]
    runs-on: ubuntu-latest
    name: Deploy
    steps:
    - name: Download repository
      uses: actions/download-artifact@v2
      with:
        name: repository
    - name: Deploy to minikube
      run:
        kubectl apply -f deploy-to-minikube.yaml
    - name: Ensure the readiness of pods
      run:
        kubectl wait pods -l app=fastapi --for condition=Ready --timeout=90s
  
  # cicd-pipeline:
  #   needs: lint-test
  #   runs-on: ubuntu-latest
  #   name: Build and Deploy
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Start minikube
  #     id: minikube
  #     with:
  #       minikube-version: 1.25.2
  #     uses: medyagh/setup-minikube@master
  #   - name: kubectl
  #     run: kubectl get pods -A
  #   - name: Build image
  #     run: |
  #       export SHELL=/bin/bash
  #       eval $(minikube -p minikube docker-env)
  #       docker build -f ./Dockerfile -t local/fastapi .
  #       echo -n "Verifying images:"
  #       docker images    
  #   - name: Deploy to minikube
  #     run:
  #       kubectl apply -f deploy-to-minikube.yaml
  #   - name: Ensure the readiness of pods
  #     run:
  #       kubectl wait pods -l app=fastapi --for condition=Ready --timeout=90s